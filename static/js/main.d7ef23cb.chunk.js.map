{"version":3,"sources":["components/Header/index.js","components/Characters/index.js","components/Wrapper/index.js","components/Score/index.js","App.js","index.js"],"names":["styles","navbarStyle","backgroundColor","justifyContent","height","textAlign","opacity","Header","className","style","color","GotCards","friend","onClick","id","alt","name","src","image","wrapperStyles","backgroundImage","backgroundSize","Wrapper","props","children","Score","highScore","score","App","state","friends","clicks","topscore","randomImg","setState","sort","Math","random","resetGame","countFriends","console","log","includes","alert","push","scoreKeeper","this","map","Characters","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"mhEAEMA,EAAS,CACbC,YAAa,CACXC,gBAAiB,QACjBC,eAAgB,SAChBC,OAAQ,QACRC,UAAW,SACXC,QAAS,KAkBEC,MAdf,WACE,OACE,yBAAKC,UAAU,SAASC,MAAOT,EAAOC,aACpC,6BACE,wBAAIQ,MAAO,CAAEC,MAAO,WAApB,+BACA,wBAAID,MAAO,CAAEC,MAAO,WAApB,wD,MCAOC,MAdf,SAAkBC,GAChB,OAEM,yBAAKJ,UAAU,YACb,yBAAKA,UAAU,OAAOK,QAAS,kBAAMD,EAAOC,QAAQD,EAAOE,MACzD,yBAAKN,UAAU,iBACb,yBAAKO,IAAKH,EAAOI,KAAMC,IAAKL,EAAOM,MAAOJ,GAAIF,EAAOE,SCP7Dd,EAAS,CACbmB,cAAe,CACbC,gBAAgB,qDAChBC,eAAgB,UAChBlB,eAAgB,aASLmB,MAJf,SAAiBC,GACf,OAAO,yBAAKf,UAAU,UAAUC,MAAOT,EAAOmB,eAAgBI,EAAMC,W,MCMvDC,MAdf,SAAeF,GACX,OACI,yBAAKT,GAAG,gBACR,yBAAKN,UAAU,UACX,0CAAgBe,EAAMG,YAE1B,yBAAKlB,UAAU,UACX,8CAAoBe,EAAMI,U,OCgFvBC,E,2MAnFdC,MAAQ,CACPC,UAEAC,OAAQ,GAERJ,MAAO,EACPK,SAAU,G,EAIXC,UAAY,WACX,EAAKC,SAAS,CACbJ,QAAS,EAAKD,MAAMC,QAAQK,MAAK,kBAAMC,KAAKC,SAAW,S,EAKzDC,UAAY,WACX,EAAKJ,SAAS,CAAEP,MAAO,IACvB,EAAKO,SAAS,CAAEH,OAAQ,M,EAIzBQ,aAAe,SAACzB,GACf,EAAKmB,YADiB,IAIhBN,EAAU,EAAKE,MAAfF,MACAK,EAAa,EAAKH,MAAlBG,SAIN,GAHAQ,QAAQC,IAAR,gBAAqB3B,IAGjB,EAAKe,MAAME,OAAOW,SAAS5B,GAE9B6B,MAAM,qDAEN,EAAKL,gBACC,CAEN,EAAKT,MAAME,OAAOa,KAAK9B,GAGvB,IAAI+B,EAAclB,EAAQ,EAE1B,EAAKO,SAAS,CAAEP,MAAOkB,IAKnBA,EAFeb,IAGlB,EAAKE,SAAS,CAAEF,SAAUa,IACN,KAAhBA,IAEHF,MAAM,8CACN,EAAKL,gB,wEAMC,IAAD,OACR,OACC,kBAAC,EAAD,KACC,kBAAC,EAAD,MACA,yBAAK9B,UAAU,OACd,kBAAC,EAAD,CAAOwB,SAAUc,KAAKjB,MAAMG,SAAUL,MAAOmB,KAAKjB,MAAMF,SAGzD,yBAAKnB,UAAU,OACbsC,KAAKjB,MAAMC,QAAQiB,KAAI,SAACnC,GAAD,OACvB,kBAACoC,EAAD,CACCnC,QAAS,kBAAM,EAAK0B,aAAa3B,EAAOE,KACxCE,KAAMJ,EAAOI,KACbE,MAAON,EAAOM,MACdJ,GAAIF,EAAOE,GACXmC,IAAKrC,EAAOE,c,GA5EDoC,IAAMC,WCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d7ef23cb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst styles = {\r\n  navbarStyle: {\r\n    backgroundColor: \"black\",\r\n    justifyContent: \"center\",\r\n    height: \"100px\",\r\n    textAlign: \"center\",\r\n    opacity: 0.5\r\n  }\r\n};\r\n\r\nfunction Header() {\r\n  return (\r\n    <nav className=\"navbar\" style={styles.navbarStyle}>\r\n      <div>\r\n        <h1 style={{ color: \"yellow\" }}>Clicky Game: G.O.T. Edition</h1>\r\n        <h5 style={{ color: \"yellow\" }}>\r\n          Click each character once OR get sent to the wall\r\n        </h5>\r\n        \r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction GotCards(friend) {\r\n  return (\r\n    //displaying the GOT characters to screen by feeding this function the props. made JSON file w/characters\r\n        <div className=\"col-sm-3\">\r\n          <div className=\"card\" onClick={() => friend.onClick(friend.id)}>\r\n            <div className=\"img-container\">\r\n              <img alt={friend.name} src={friend.image} id={friend.id}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n  );\r\n}\r\n\r\nexport default GotCards;","import React from \"react\";\r\n\r\nconst styles = {\r\n  wrapperStyles: {\r\n    backgroundImage: `url(\"https://wallpaperaccess.com/full/808172.png\")`,\r\n    backgroundSize: \"contain\",\r\n    justifyContent: \"flex-end\"\r\n \r\n  }\r\n};\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\" style={styles.wrapperStyles}>{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Score(props){\r\n    return (\r\n        <div id=\"scoreSection\">\r\n        <div className=\"col-12\">\r\n            <h7>Top Score: {props.highScore}</h7>\r\n        </div>\r\n        <div className=\"col-12\">\r\n            <h7>Current Score: {props.score}</h7>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Score;","import React from 'react';\nimport Header from './components/Header';\nimport Characters from './components/Characters';\nimport Wrapper from './components/Wrapper';\nimport Score from './components/Score';\nimport friends from './friend.json';\n\nclass App extends React.Component {\n\tstate = {\n\t\tfriends,\n\t\t//empty array\n\t\tclicks: [],\n\t\t//counter to keep track of clicks\n\t\tscore: 0,\n\t\ttopscore: 0\n\t};\n\n\t// randomized images function randomizes the imgs after one is clicked\n\trandomImg = () => {\n\t\tthis.setState({\n\t\t\tfriends: this.state.friends.sort(() => Math.random() - 0.5)\n\t\t});\n\t};\n\n\t//function to reset game after win or loss\n\tresetGame = () => {\n\t\tthis.setState({ score: 0 });\n\t\tthis.setState({ clicks: [] });\n\t};\n\n\t//on click function\n\tcountFriends = (id) => {\n\t\tthis.randomImg();\n\n\t\t//this is the new state we would update on click\n\t\tvar { score } = this.state;\n\t\tvar { topscore } = this.state;\n\t\tconsole.log(`\"ID:\" ${id}`);\n\n\t\t//this looks to see if the ID is within the array of previously clicked characters\n\t\tif (this.state.clicks.includes(id)) {\n\t\t\t//if ID matches an ID within the array send alert\n\t\t\talert('Pack your bags! You are getting sent to the wall!');\n\t\t\t//call the function to reset the game\n\t\t\tthis.resetGame();\n\t\t} else {\n\t\t\t//if ID is not in the array push it into the clicked characters array\n\t\t\tthis.state.clicks.push(id);\n\n\t\t\t//make a variable to track the score as it increases\n\t\t\tlet scoreKeeper = score + 1;\n\t\t\t//set the score property to the scoreKeeper variable\n\t\t\tthis.setState({ score: scoreKeeper });\n\n\t\t\t//check highscore\n\t\t\tvar highestScore = topscore;\n\n\t\t\tif (scoreKeeper > highestScore) {\n\t\t\t\tthis.setState({ topscore: scoreKeeper });\n\t\t\t\tif (scoreKeeper === 12) {\n\t\t\t\t\t//alert a win if it reaches 12\n\t\t\t\t\talert('Yay you won! You can stay in your kingdom!');\n\t\t\t\t\tthis.resetGame();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Wrapper>\n\t\t\t\t<Header />\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<Score topscore={this.state.topscore} score={this.state.score} />\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t{this.state.friends.map((friend) => (\n\t\t\t\t\t\t<Characters\n\t\t\t\t\t\t\tonClick={() => this.countFriends(friend.id)}\n\t\t\t\t\t\t\tname={friend.name}\n\t\t\t\t\t\t\timage={friend.image}\n\t\t\t\t\t\t\tid={friend.id}\n\t\t\t\t\t\t\tkey={friend.id}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</Wrapper>\n\t\t);\n\t}\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}